#!/usr/bin/env python

from optparse import OptionParser
from ConfigParser import SafeConfigParser

import os
import sys
import re

usage = 'Usage: %prog [options] HOSTNAME'
version = '%prog 0.0.1'

parser = OptionParser(version=version, usage=usage)
parser.add_option("-c", "--config", dest="conffile",
                  help="load configuration from CONFFILE")
parser.add_option("-v", "--verbose",
                  action="store_true", dest="verbose",
                  help="use verbose output")
(settings, args) = parser.parse_args()

if not settings.conffile:
    for f in [os.path.expanduser('~/.powerdyn.conf'), '/etc/powerdyn/powerdyn.conf', './powerdyn.conf']:
        if os.path.isfile(f):
            settings.conffile = f
    if not settings.conffile:
        print "Could not find a configuration file, exiting."
        sys.exit(1)

config = SafeConfigParser()
config.read(settings.conffile)

settings.domain = config.get('powerdyn', 'domain')
settings.dbtype = config.get('powerdyn', 'dbtype')
if settings.dbtype == 'mysql':
    database = 'MySQLdb'
    settings.dbsettings = { 'host': config.get('powerdyn', 'dbhost'),
                            'db': config.get('powerdyn', 'dbname'),
                            'user': config.get('powerdyn', 'dbuser'),
                            'passwd': config.get('powerdyn', 'dbpass'),
                          }
else:
    print "No supported database configured."
    sys.exit(1)

exec("import %s as database" % database)
settings.database = database

if len(args) != 1:
    parser.print_help()
    sys.exit(1)

HOSTNAME=args[0]
NEW_IPv4 = None
NEW_IPv6 = None
changed = False

if os.environ.has_key('SSH_CLIENT'):
  sshclient = os.environ['SSH_CLIENT']
else:
  print "not an SSH connection, nothing to do"
  sys.exit(1)

ip = sshclient.split()[0]

if re.match(r'^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$', ip):
  NEW_IPv4 = ip
elif re.match(r'^[0-9a-f]{1,4}:[0-9a-f:]*:[0-9a-f]{0,4}$', ip):
  NEW_IPv6 = ip
else:
  print "IPv32?!"
  sys.exit(1)


_GET_A = "SELECT content FROM records WHERE name=%(hostname)s AND type='A'"
_GET_AAAA = "SELECT content FROM records WHERE name=%(hostname)s AND type='AAAA'"
_GET_SOA = "SELECT content FROM records WHERE name=%(hostname)s AND type='SOA'"

_SET_A = "UPDATE records SET content=%(ip)s WHERE name=%(hostname)s AND type='A'"
_SET_AAAA = "UPDATE records SET content=%(ip)s WHERE name=%(hostname)s AND type='AAAA'"
_SET_SOA = "UPDATE records SET content=%(soa)s WHERE name=%(hostname)s AND type='SOA'"

import datetime

db = database.connect(**settings.dbsettings)
dbc = db.cursor()

if NEW_IPv4:
  dbc.execute(_GET_A, {'hostname': HOSTNAME})
  r = dbc.fetchone()
  if not r:
    print "%s not found!" % HOSTNAME
    sys.exit(1)
  ipv4 = r[0]
  if ipv4 != NEW_IPv4:
    changed = True
    print "Updating A entry from %s to %s" % (ipv4, NEW_IPv4)
    dbc.execute(_SET_A, {'hostname': HOSTNAME, 'ip': NEW_IPv4})

if NEW_IPv6:
  dbc.execute(_GET_AAAA, {'hostname': HOSTNAME})
  r = dbc.fetchone()
  if not r:
    print "%s not found!" % HOSTNAME
    sys.exit(1)
  ipv6 = r[0]
  if ipv6 != NEW_IPv6:
    changed = True
    print "Updating AAAA entry from %s to %s" % (ipv6, NEW_IPv6)
    dbc.execute(_SET_AAAA, {'hostname': HOSTNAME, 'ip': NEW_IPv6})

if changed:
  if settings.verbose:
    print "We had changes, updating serial"
  dbc.execute(_GET_SOA, {'hostname': settings.domain})
  soa = dbc.fetchone()[0]
  if settings.verbose:
    print "Old SOA record: %s" % soa
  soa = soa.split()
  serial = soa[2]
  today = datetime.date.today().strftime('%Y%m%d')
  if serial.startswith(today):
    serial = str(int(serial)+1)
  else:
    serial = '%s00' % today
  soa = ' '.join(soa[:2] + [serial] + soa[3:])
  if settings.verbose:
    print "New SOA record: %s" % soa
  dbc.execute(_SET_SOA, {'hostname': settings.domain, 'soa': soa})
  db.commit()

dbc.close()
db.close()
